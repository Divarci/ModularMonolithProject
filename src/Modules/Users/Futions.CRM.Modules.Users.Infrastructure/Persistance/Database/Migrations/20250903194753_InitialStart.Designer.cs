// <auto-generated />
using System;
using Futions.CRM.Modules.Users.Infrastructure.Persistance.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Futions.CRM.Modules.Users.Infrastructure.Persistance.Database.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250903194753_InitialStart")]
    partial class InitialStart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Futions.CRM.Modules.Users.Domain.Roles.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Permissions", "users");

                    b.HasData(
                        new
                        {
                            Code = "deals:read"
                        },
                        new
                        {
                            Code = "deals:create"
                        },
                        new
                        {
                            Code = "deals:update"
                        },
                        new
                        {
                            Code = "deals:remove"
                        },
                        new
                        {
                            Code = "users:read"
                        },
                        new
                        {
                            Code = "users:update"
                        });
                });

            modelBuilder.Entity("Futions.CRM.Modules.Users.Domain.Roles.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Name");

                    b.ToTable("Roles", "users");

                    b.HasData(
                        new
                        {
                            Name = "Administrator"
                        },
                        new
                        {
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("Futions.CRM.Modules.Users.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("User", "users");
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RolesName", "PermissionCode");

                    b.HasIndex("PermissionCode");

                    b.ToTable("RolePermissions", "users");

                    b.HasData(
                        new
                        {
                            RolesName = "Member",
                            PermissionCode = "deals:read"
                        },
                        new
                        {
                            RolesName = "Member",
                            PermissionCode = "deals:create"
                        },
                        new
                        {
                            RolesName = "Member",
                            PermissionCode = "deals:update"
                        },
                        new
                        {
                            RolesName = "Member",
                            PermissionCode = "deals:remove"
                        },
                        new
                        {
                            RolesName = "Member",
                            PermissionCode = "users:read"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "deals:read"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "deals:create"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "deals:update"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "deals:remove"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "users:read"
                        },
                        new
                        {
                            RolesName = "Administrator",
                            PermissionCode = "users:update"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RoleName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "users");
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("Futions.CRM.Modules.Users.Domain.Roles.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Futions.CRM.Modules.Users.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Futions.CRM.Modules.Users.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Futions.CRM.Modules.Users.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
